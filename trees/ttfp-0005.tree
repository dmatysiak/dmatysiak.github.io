\title{Substitution in predicate logic}

\p{After providing a few examples of how quantifiers may be used, Thompson explains how
variables and substitutions operate in propositions with quantifiers. Quantifier variables
may be consistently renamed as long as the new name is not already in use in the affected
formula. A variable #{x} is \em{bound} in a fomula #{\forall x.A} or #{\exists x.B}. The
quantifier binds values to #{x}. All other occurrences are \em{free}. So in the formula
#{\forall x.P(x,y)}, #{x} is bound, while #{y} is free.}

\p{\em{Substitution} is the act of consistently replacing a variable with an arbitrary
term. Only free variables may be substituted arbitrarily in this way, unlike bound
variables, which express a universal or existential claim. Thompson uses the notation
#{A[t/x]} to mean the formula #{A} with #{t} substituted for #{x}.}

\p{When substituting a variable with an arbitrary term, we must be careful to avoid
\em{variable capture}. Variable capture occurs when a free variable within the term
substituted for a variable contains a variable that is otherwise bound in the formula in
which we are making the substitution. Thompson gives the example of substituting the term
#{y+1} for #{x} in the formula #{\exists y.y>x}. This substitution results in the formula
#{\exists y.y>y+1}, which is obviously false. To avoid this problem, we can rename the
variable #{y} in #{y+1} to something that does not occur in #{\exists y.y>x} before
performing the substitution.}

\p{Formally, Thompson defines substitution, inductively, in the following way.}

\transclude{ttfp-000H}

\p{For a formula #{A}, #{A[t/x]} is defined as follows.}

\transclude{ttfp-000I}
\transclude{ttfp-000J}
\transclude{ttfp-000K}
